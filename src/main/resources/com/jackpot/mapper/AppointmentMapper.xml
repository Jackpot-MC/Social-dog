<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jackpot.mapper.AppointmentMapper">
	<resultMap id="appointmentMap"
		type="com.jackpot.domain.AppointmentVO">
		<id property="appointmentId" column="appointment_id" />
<!-- 		<result property="appointmentId" column="appointment_id" /> -->
		<result property="appointmentName" column="appointment_name" />
		<result property="appointmentDate" column="appointment_date" />
		<result property="placeId" column="place_id" />
		<result property="hostId" column="host_id" />
		<result property="content" column="content" />	
		<result property="placeName" column="place_name" />	
		<result property="placeKakaoId" column="place_kakao_id" />	
		<result property="participantId" column="participant_id" />
		<result property="memberId" column="member_id" />
		<result property="memberName" column="member_name" />
		<result property="memberAddress" column="member_address" />
	</resultMap>
	
	<resultMap id="placeMap"
		type="com.jackpot.domain.PlaceVO">
		<id property="placeId" column="place_id" />
		<result property="placeName" column="place_name" />
		<result property="placeSpot" column="place_spot" />
		<result property="placeTypeId" column="place_type_id" />
		<result property="placeKakaoId" column="place_kakao_id" />
	</resultMap>

  
  	<insert id="insert">
		insert into appointment (appointment_name, content, appointment_date, place_name, host_id, place_kakao_id)
		values
		(#{appointmentName}, #{content}, #{appointmentDate}, #{placeName}, #{hostId}, #{placeKakaoId} )

		<selectKey resultType="Long" keyProperty="appointmentId"
			keyColumn="appointment_id" order="AFTER">
			SELECT LAST_INSERT_ID();
		</selectKey>
	</insert>
  
    <insert id="insertPlace">
		insert into appointment (place_name, place_type_id, place_kakao_id)
		values
		(#{placeName}, #{placeTypeId}, #{placeKakaoId})

		<selectKey resultType="Long" keyProperty="placeId"
			keyColumn="place_id" order="AFTER">
			SELECT LAST_INSERT_ID();
		</selectKey>
	</insert>

	<update id="update">
		update appointment
		set 
			appointment_name = #{appointmentName},
			content = #{content},
			appointment_date = #{appointmentDate},
			place_id = #{placeId}
		where appointment_id = #{appointmentId}
	</update>

	<select id="read" resultType="AppointmentVO">
		select appointment_id, appointment_name, content, appointment_date, 
		place.place_spot, appointment.place_name, member_name
		from appointment
		left outer join member on appointment.host_id = member_id
		left outer join place on appointment.place_id = place.place_id
		left outer join place_type on place.place_type_id = place_type.place_type_id
		where appointment_id = #{appointment_id}
	</select>

	<delete id="delete">
		delete from appointment
		where appointment_id = #{appointment_id}
	</delete>

	<select id="getList" resultType="AppointmentVO">
		select * from appointment
		order by appointment_date
		limit 0, 10
	</select>

	<select id="getListWithPaging" resultType="AppointmentVO">
		select appointment_id, appointment_name, content, appointment_date, appointment.place_name, host_id, appointment.place_kakao_id,
		member.member_name, place.place_spot, place.place_name, place_type.place_type_name
		from appointment
		left outer join member on appointment.host_id = member.member_id
		left outer join place on appointment.place_id = place.place_id
		left outer join place_type on place.place_type_id = place_type.place_type_id
		<where>
			<include refid="criteria"></include>
		</where>
		order by appointment_date desc
		limit #{offset}, #{amount}
	</select>
	
	<update id="setPlaceIdFromPlaceName">
		UPDATE appointment 
		set place_id = 
			(select place_id from place
			 where place_name = #{arg1})
		where appointment_id = #{arg0}
	</update>

	<select id="getTotalCount" resultType="int">
		select count(*) from appointment
		left outer join member on appointment.host_id = member.member_id
		left outer join place on appointment.place_id = place.place_id
		left outer join place_type on place.place_type_id = place_type.place_type_id
		<where>
			<include refid="criteria"></include>
		</where>
	</select>

	<select id="getParticipantList" resultType="ParticipantVO">
		SELECT
			participant_id,
			participant.member_id AS member_id,
			appointment_id,
			member.member_name AS member_name,
			member.member_address
		FROM participant
		LEFT OUTER JOIN member on participant.member_id = member.member_id
		WHERE appointment_id = #{appointment_id}
	</select>
	
	<select id="getMemberId" resultType="Long">
		select member.member_id from member
		left outer join participant on member.member_id = participant.member_id
		where login_id = #{login_id}
		limit 1
	</select>
	
	<insert id="attend">
		insert into participant (appointment_id, member_id)
		values
		(#{arg0}, #{arg1})
		<selectKey resultType="Long" keyProperty="participantId"
			keyColumn="participant_id" order="AFTER">
			SELECT LAST_INSERT_ID();
		</selectKey>
	</insert>
	
	<delete id="absent">
		delete from participant
		where 
		appointment_id = #{arg0}
		and
		member_id = #{arg1}
	</delete>

	<select id="checkAttendance" resultType="int">
		select count(*) from participant
		where
		appointment_id = #{arg0}
		and
		member_id = #{arg1}
	</select>
	
	<select id="getMyList" resultType="AppointmentVO">
		select appointment.appointment_id, appointment_name, content, appointment_date, appointment.place_name, host_id,
		member.member_name, place.place_name, place_type.place_type_name
		from appointment
		left outer join member
		on host_id = member.member_id
		left join participant
		on appointment.appointment_id = participant.appointment_id
		left outer join place
		on appointment.place_id = place.place_id 
		left outer join place_type
		on place.place_type_id = place_type.place_type_id 
		where 
		host_id = #{member_id}
		or
		participant.member_id  = #{member_id}
		order by appointment_date
	</select>
	
	<sql id="criteria"> <!-- 중복 SQL 구문 분리, id 지정 -->
		<trim prefixOverrides="OR">
			<foreach item="type" collection="typeArr">
				<trim prefix="OR">
					<choose>
						<when test="type == 'N'.toString()">
							appointment_name like CONCAT('%',#{keyword},'%')
						</when>
						<when test="type == 'H'.toString()">
							member.login_id like
							CONCAT('%',#{keyword},'%')
						</when>
						<when test="type == 'L'.toString()">
							place.place_name like
							CONCAT('%',#{keyword},'%')
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>

</mapper>