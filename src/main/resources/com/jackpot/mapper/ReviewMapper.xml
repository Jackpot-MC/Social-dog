<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jackpot.mapper.ReviewMapper">

	<resultMap id="reviewMap" type="com.jackpot.domain.ReviewVO">
		<id property="reviewId" column="review_id" />
		<result property="memberId" column="member_id" />
		<result property="placeId" column="place_id" />
		<result property="reviewTitle" column="review_title" />
		<result property="reviewContent" column="review_content" />
		<result property="rating" column="rating" />
		<result property="regDate" column="reg_date" />
		<result property="updateDate" column="update_date" />
		<result property="memberLoginId" column="login_id" />
		<result property="memberName" column="member_name" />
	</resultMap>
	
	<select id = "read" resultMap="reviewMap">
		select review_id, review.member_id, place_id, review_title, review_content, rating, reg_date, update_date, m.login_id, m.member_name
		from review left outer join `member` m 
		on review.member_id = m.member_id
		where review_id = #{reviewId} 
	</select>
	
	<insert id = "insert">
		insert into review (member_id, place_id, review_title, review_content, rating, login_id, member_name)
		values ((select member_id from member where member.login_id = #{memberLoginId}),
		#{placeId}, #{reviewTitle}, #{reviewContent}, #{rating},
		(select login_id from member where member.login_id = #{memberLoginId}),
		(select member_name from member where member.login_id = #{memberLoginId}));

		<selectKey resultType= "Long" keyProperty="reviewId" keyColumn="review_id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<update id = "update">
		update review
		set review_title = #{reviewTitle}, 
			review_content = #{reviewContent}, 
			rating = #{rating}
		where review_id = #{reviewId}
	</update>
	
	<delete id="delete">
		delete from review
		where review_id = #{reviewId}
	</delete>
	
	<select id="getList" resultType="com.jackpot.domain.ReviewVO" resultMap="reviewMap">
		select review_id, review.member_id, place_id, review_title, review_content, rating, reg_date, update_date, m.login_id, m.member_name
		from review left outer join `member` m 
		on review.member_id = m.member_id
		order by review_id desc
	</select>

	<select id="getListWithPaging" resultType="ReviewVO" resultMap="reviewMap">
		select review_id, review.member_id, place_id, review_title, review_content, rating, reg_date, update_date, m.login_id, m.member_name
		from review left outer join `member` m 
		on review.member_id = m.member_id
		<where>
			<include refid="criteria"></include>
		</where>
		order by review_id desc
		limit #{offset}, #{amount}
	</select>
	
	<select id="getTotalCount" resultType="int">
		select count(*) from review
		<where>
			<include refid="criteria"></include>
		</where>
	</select>
	
	<select id="getAverage" resultType="int">
		SELECT CONVERT(AVG(rating), SIGNED INTEGER) AS 'average' FROM review
	</select>
	
	<select id="getReviewId" resultType="Long">
		select review.review_id from review
		where review.login_id = #{member.loginId}
	</select>
	
	<sql id="criteria"> <!-- 중복 SQL 구문 분리, id 지정 -->
		<trim prefixOverrides = "OR">
			<foreach item = "type" collection="typeArr">
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">
							review_title like CONCAT('%',#{keyword},'%')
						</when>
						<when test="type == 'C'.toString()">
							review_content like CONCAT('%',#{keyword},'%')
						</when>
						<when test="type == 'A'.toString()">
							review.member_id like CONCAT('%',#{keyword},'%')
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>	
	</sql>
	
</mapper>